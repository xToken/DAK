This collection of plugins (and loader) make up what I started calling the DAK (Duck Admin Kit?)

With 223, this has changed somewhat.  This mod can be downloaded via SteamWorkshop, and will autodownload on all clients on connect.
The ModID for DAK is 5f4f178, which you will want to set in the server command line, and in MapCycle.json.  The server will automatically download the mod once set.

*NOTE* - If you decide to load this from Server.lua to bypass mod filter, you will not need to add the ModID to the command line or MapCycle.json

A DAKConfig.json file will be automatically created in the config_path from the server command line, or in %AppData%\Natural Selection 2 if not specified.
As a note, if you decide to load DAKLoader.lua from Server.lua instead of using SteamWorkshop, then you will also want to edit DAKConfig.json, and change 
LoadFromServerLUA to true.  You will also want to make sure that you place the Script.Load("lua/DAKLoader.lua") 
before the load statement for ServerConfig and after Script.Load for Shared.lua - Between lines 13 and 23 currently (B228).

All mods can be enabled/disabled via the DAKconfig.json file.  A sample usable config file is generated by the mod, which uses the recommended values.
Generally the default configuration should work for most instances, if you do customize the messages be sure to maintain the same amount of regex strings (%s, %f, %d).
 
 Server Admin commands added:
 sv_rcon - allows an admin to execute a command on the servers console.
 sv_reloadconfig - reloads the DAKConfig.json file.
 sv_listplugins - displays all loaded plugins, their revisions and if they are enabled/disabled.
 sv_defaultconfig - will default the config for the plugin passed, or ALL.
 sv_reloadplugins - Will reload all plugins on the server.
 sv_maps - lists all maps currently available on the server
 sv_randomon - will turn on random teams
 sv_randomoff - will turn off random teams
 sv_tournamentmode - takes 3 possible parameters, 1/true, 0/false for tournamentmode, friendlyfire and official mode respectively.
	sv_tournamentmode 1 1 0 would enable tournamentmode and friendlyfire, but stay in PCW mode.  Official mode requires team captains to ready.
 sv_setcaptain - Can be used to set a captain for a team, is required for official mode.
 sv_forceroundstart - Used in tournamentmode to force the round start as an Admin.
 sv_cancelroundstart - Used in tournamentmode to cancel the round start as an Admin.
 sv_votemap - starts a mapvote at anytime
 sv_cancelmapvote - cancels any in progress map votes.
 sv_listadmins - will list all groups and admins configured in the ServerAdmin.json file
 sv_killserver - Does exactly what it says - This is not a clean closing of the server, it uses a bug which causes a crash. (This no longer works as of B225)
 sv_hasreserve - Will grant this admin a reserve slot that does not expire.
 sv_surrendervote - Will start a surrender vote for the team provided.
 sv_cancelsurrendervote - Will cancel a in progress surrender vote for the team provided.
 sv_afkimmune - Can be granted to users to prevent them from being AFKkicked.

 Below is a sample of the default plugins and their config options, with an explanation of each option.
 {
     "DAKLoader": {
      "kEnabled": Not used anymore.
      "GamerulesClassName": This is the classname of the Gamerules entity (default NS2Gamerules), used to override those functions for increased functionality.
      "OverrideInterp": {
        "kInterp": This is the amount of MS the interpolation will be set to on client connect. (default 100)
        "kEnabled": This is a boolean for if the Interpolation override should be enabled.
      },
      "LoadFromServerLUA": This boolean changes the load order and adds an additional delayed load if DAK is loaded from Server.lua instead of from Game_Setup.xml.
      "GamerulesExtensions": This is used to enable/disable certain functions of DAK that are overrides of GamerulesClassName functions (many logging functions and a couple others)
      "kPluginsList": [ This array stores the list of plugins to load, looks for a config_ and plugin_ for the name provided in the plugins subfolder. "motd" loads config_motd and plugin_motd from the plugins folder. ],
      "kDelayedServerUpdate": This controls the delay between updates of anything running on ServerUpdate DAK Event (per server frame, default 1 second)
      "kDelayedClientConnect": This controls the delay after client connect that the DelayedClientConnect event is triggered.
    },
    "VoteSurrender": {
      "kVoteSurrenderVotingTime": Time that a surrender vote will run for.
      "kVoteSurrenderAlertDelay": Delay between alert messages regarding the surrender vote.
      "kVoteSurrenderMinimumPercentage": Minimum Percentage of votes needed for surrender to pass.
      "kEnabled": Boolean which controls if the Surrender Vote plugin is loaded.
    },
    "AFKKicker": {
      "kAFKKickWarning1": Time before being kicked that the first warning message will be shown (best to use number cleanly divisible by your CheckDelay)
      "kAFKKickMessage": Message logged to console when a user is kicked.
      "kAFKKickDelay": Delay in seconds before a AFK user will be kicked.
      "kAFKKickCheckDelay": Delay between checks of users position and view angles.
      "kAFKKickWarning2": Time before being kicked that the second warning message will be shown (best to use number cleanly divisible by your CheckDelay)
      "kAFKKickReturnMessage": Message shown to user that recieved warning messages but then moved.
      "kAFKKickDisconnectReason": Message logged when user is disconnected because of idling.
      "kAFKKickWarningMessage1": First warning message shown to AFK users.
      "kAFKKickClientMessage": Message shown to users the cycle before they are kicked (they will be kicked unless they move in kAFKKickCheckDelay seconds)
      "kAFKKickWarningMessage2": Second warning message shown to AFK users.
      "kAFKKickMinimumPlayers": Amount of players required before people will be kicked for being AFK.
      "kEnabled": This boolean controls if the AFK Kicker plugin is enabled.
    },
    "AutoConcede": {
      "kImbalanceAmount": Amount of players difference needed between teams.
      "kEnabled": This boolean controls if the autoconcede plugin is enabled.
      "kConcedeCancelledMessage": Message shown when autoconcede is cancelled because teams are within limits.
      "kMinimumPlayers": Amount of players required before autoconcede will activate.
      "kConcedeMessage": Message shown when autoconcede passes and game is ended.
      "kImbalanceDuration": Time before round will end due to imbalanced teams.
      "kWarningMessage": Message shown when autoconcede detects team inbalance and starts countdown.
    },
    "MOTD": {
      "kMOTDMessageDelay": Delay in seconds between blocks of messages sent to client.
      "kMOTDMessage": [ Messages displayed on player connect. ]
      "kMOTDMessagesPerTick": How many messages to send per block.
      "kMOTDMessageRevision": The revision of the MOTD used to track accepted clients.
      "kEnabled": This boolean controls if the MOTD plugin is loaded.
    },
    "MapVote": {
      "kVoteMapRockTheVote": Message displayed when player rocks the vote.
      "kMapsToSelect": Maximum number of maps to select for vote.
      "kDontRepeatFor": How long to store a map and not repeat. - More of a future proof setup, there isnt enough maps currently to cause this to be used.
      "kVoteMapExtended": Message displayed if an extend map vote passes.
      "kVoteMapNoWinner": Message displayed if no map wins a vote.
      "kVoteMapStarted": Message displayed when map vote starts.
      "kVoteStartDelay": Delay in seconds after round end before the map vote starts.
      "kVoteMapBeginning": Message displayed to clients when map vote is about to start.
      "kVoteMapHowToVote": Information message displayed when map vote is about to start.
      "kVoteMapWinner": Message displayed if a map wins the vote.
      "kExtendDuration": Time in minutes to that an extend map vote will add.
      "kVoteMapMapListing": Message displayed detailing each map and how to vote for it.
      "kVoteMapTimeLeft": Message displayed during map vote with time remaining.
      "kVoteNotifyDelay": How often to display current vote status.
      "kVotingDuration": Duration of the map vote.
      "kVoteMapCurrentMapVotes": Message displayed during map vote with maps current vote total, and how to vote for it.
      "kVoteMapCancelled": Message displayed if map vote is cancelled.
      "kVoteMapAutomaticChange": Message displayed when map vote is unsuccessful and next map will be obtained from map cycle.
      "kVoteMapInsufficientMaps": Message displayed if there is insufficient maps for a map vote.
      "kVoteChangeDelay": Delay after successful vote before map change.
      "kVoteMapMinimumNotMet": Message displayed if a map wins the vote but doesnt make the minimum requirement.
      "kVoteMapTie": Message displayed if a tie is encountered.
      "kVoteMinimumPercentage": Minimum Percentage of votes required for a single map for it to succeed.
      "kRTVMinimumPercentage": Minimum Percentage of rtv votes (rock the vote) to start a map vote at any time.
      "kMaximumExtends": Maximum amount of extends that can occur per map.
      "kEnabled": This boolean controls if the map vote plugin is enabled.
    },
    "ReservedSlots": {
      "kReserveSlotServerFullDisconnectReason": Message logged when client is kicked because server is full.
      "kReservedSlots": This is the amount of slots that will be reserved for reserve slot players.  This should be kMinimumSlots more than the amount of slots you wish to have.
      "kMaximumSlots": This is the server's maximum number of slots.
      "kReserveSlotKickedDisconnectReason": Message logged when client is kicked to make room for reserve slot player.
      "kDelayedSyncTime": Delay in which the server will wait after most recent connect/disconnect to update cached player list against server list.
      "kDelayedKickTime": Delay before kicking a player due to a reserve slot.
      "kReserveSlotKickedForRoom": Message displayed to client kicked to make room for reserve slot player.
      "kReserveSlotServerFull": Message displayed to client connected to full server without reserve slot.
	  "kReservePassword": = This is the password set when all the regular player slots are full, that all reserve players would need to know.
      "kMinimumSlots": This is the amount of slots the server will always keep free (unless completely full of reserve slot players).  Should most likely always be 1.
      "kEnabled": This boolean control if reserve slot plugin is enabled.
    },
    "TournamentMode": {
      "kTournamentModeCountdown": Message displayed when counting down till round start.
      "kTournamentModeGameStartDelay": Delay between round starting after both teams are ready.
      "kTournamentModeReadyDelay": This delay prevents ready/unready spam.
      "kTournamentModePubAlertDelay": Frequency of message displayed to clients waiting for round start in pub mode.
      "kTournamentModePubPlayerWarning": Message displayed to clients when waiting for enough players in pub mode.
      "kTournamentModePubMinPlayers": Minimum number of players needed per team to start the round in pub mode.
      "kTournamentModePubMode": This boolean controls if the tournamentmode will run in pub mode, which prevents the game from starting until both teams have kTournamentModePubMinPlayers.
      "kEnabled": This boolean controls if tournamentmode is enabled.
    },
    "VoteRemovals": {
      "kVoteRemovalBanDuration": Time in minutes that a removalvote bans the player from the server.
      "kVoteRemovalMinimumPercentage":Minimum Percentage of votes needed for removal vote to pass.
      "kVoteRemovalAlertDelay": Delay between alert messages regarding the removal vote.
      "kVoteRemovalVotingTime": Time that a removal vote will run for.
      "kEnabled": Boolean which controls if the vote removals plugin is enabled.
    },
    "VoteRandom": {
      "kVoteRandomInstantly": This boolean controls how the random teams plugin works.  If true, the teams are randomed instantly for one round.  If false, the teams are randomed each round starting with the next new round for kVoteRandomDuration.
      "kVoteRandomConnectAlert": The message displayed when a client connects and random teams are on.
      "kVoteRandomMinimumPercentage": The percentage of votes required to turn on random teams.
      "kVoteRandomDuration": The duration that the random team vote stays enabled for (if kVoteRandomInstantly is false).
      "kVoteRandomVoteCountAlert": The message displayed when a client votes to enable random teams.
      "kVoteRandomEnabledDuration": "The message displayed when random teams are enabled with kVoteRandomInstantly set to false.
      "kVoteRandomEnabled": The message displayed when random teams are enabled with kVoteRandomInstantly set to true.
      "kEnabled": This boolean controls if voterandom is enabled.
    },
    "Unstuck": {
      "kMinimumWaitTime": This is delay between typing the unstuck and when your actually moved.
      "kTimeBetweenUntucks": This is delay after being unstuck before you can be unstuck again.
      "kEnabled": This boolean controls if unstuck is enabled.
    },
    "EnhancedLogging": {
      "kEnhancedLoggingSubDir": Subdirectory under the config_path in which log files should be stored.
	  "kServerTimeZoneAdjustment": = This adjusts the log timing based on the value set, -8 for PST, -5 EST and so on.
      "kEnabled": Boolean which controls if the Enhanced logging plugin is enabled.
    },
    "BaseAdminCommands": {
      "kEnabled": Boolean which controls if the DAK Base Admin commands plugin is enabled.
    }
 }

 All server admin commands will also print to any other admins consoles when used (admins that also have access to that command)
 
 General console commands added:
 timeleft - displays time left till next map vote.
 acceptmotd - supresses motd messages unless the kMOTDMessageRevision is changed.  This is saved in DAKSettings.json and persists between map changes.
 printmotd - will print the motd out.
 voterandom - will vote to enable random teams.
 ready - marks your team as ready if tournamentmode is enabled.
 vote - used to vote for a map during map vote, needs to have a number as a paramater.
 rtv or rockthevote - used to vote for a map vote (can be started anytime)
 surrender - used to start or vote in an active surrender vote.
 
 Breakdown of current 'Plugins' system and the standard 'Plugins'
 DAK extends various events from the engine, and creates a couple of its own.
 
 kDAKOnClientConnect
 kDAKOnClientDisconnect
 kDAKOnServerUpdate
 kDAKOnClientDelayedConnect
 kDAKOnTeamJoin
 kDAKOnGameEnd
 kDAKOnEntityKilled
 kDAKOnClientChatMessage
 kDAKOverrideMapChange
 
 Functions can be added to these variables which will be run when these events occur, sample shown below:
 table.insert(kDAKOnClientDisconnect, function(client) return LogOnClientDisconnect(client) end)
 
 Plugins are loaded from the plugin folder by DAK, with config_ files being loaded to setup config if needed, and plugin_ files containing the plugin logic.
 The config_ files uses an array to track all config functions:
 table.insert(kDAKPluginDefaultConfigs, {PluginName = "AFKKicker", DefaultConfig = function() SetupDefaultConfig() end })
 
 Notes about Gamerules overrides - they require the same args from vanilla NS2, or will need manual configuration.
 This can be changed in DAKLoader.lua, kDAKBaseGamerules
 Below are the functions overriden and their default configuration.
 
	function NS2Gamerules:OnCreate()
	function NS2Gamerules:JoinTeam(player, newTeamNumber, force)
	function NS2Gamerules:EndGame(winningTeam)
	function NS2Gamerules:OnEntityKilled(targetEntity, attacker, doer, point, direction)
	function NS2Gamerules:UpdatePregame(timePassed)
	function NS2Gamerules:SetGameState(state)
	function NS2Gamerules:CastVoteByPlayer( voteTechId, player )
	
	Also included is a function to capture chat messages and raise events based on them, disabling the gamerules extensions
	will also disable this.

	function Server.AddChatToHistory(message, playerName, steamId, teamNumber, teamOnly)

 These can be disabled in DAKConfig.json, _GamerulesExtensions.
 
 Please note that errors caused in functions added are systemic, meaning they will affect the execution of NS2 gamecode, so some care must be taken.
 
 OverrideInterp Plugin
 - This is mainly for testing, however it overrides the default interpolation value of 100ms on each clients connect, making sure that
 the value is correct set client/server side.
 
 VoteRandom Plugin
 - This plugin enables players to vote to enable random teams, and supports either randoming the teams instantly, or enabling random teams for a set duration,
 where the next game and all games for a set duration have random teams.
 
 TournamentMode Plugin
 - Made a recent re-visit to this plugin to improve basics regarding it, created basic framework for PCW/Official modes.  May continue to improve
 and add to differences between modes.
 
 ReservedSlots Plugin
 - Basic Reserve slots plugin, however is more a proof of concept and does not have the ability to work in a way that provides a good user experience.
 Basic framework may prove useful should the ability arise to reject clients connection earlier or modify query response.
 
 MOTD Plugin
 - This plugin provides a MOTD system that could be more accurately described as a rules system, which allows clients to accept and have the messages
 not always appear on connect.  Should be loaded as last plugin so that other plugins can stop the messages if needed.  Messages are also sent in groups
 so that they can all be viewed onscreen.
 
 MapVote Plugin
 - This plugin provides a map voting system, which will read the mapcycle.txt for cycle time and the list of maps.  On round end a map vote is triggered
 if enough time has elapsed, with a randomly selected list of maps which excludes some of the map last played.  Since NS2 only has 4 offical maps currently
 the plugin will automatically add back in maps if there is not enough to make the minimum.  Almost all parts are configurable in the configs.
 
 AFKKicker Plugin
 - This plugin checks if a player is idle by caching their viewangles and origin, and displays messages to alert them if they are going to be kicked.
 May in the future be improved to use idle parameter on the player.
 
 EnhancedLogging Plugin
 - This plugin enables alot of extra logging, which is done to a seperate directory within the configured server admin path.
 Sample log file below with some information omitted:
 
 L 9/16/2012 - 12:55:53 - <AAA><10><STEAMID><0> joined team 2.
 L 9/16/2012 - 12:55:59 - <[Mi7] JumpinJackFlas><13><STEAMID><0> changed name to [Mi7] JumpinJackFlash.
 L 9/16/2012 - 12:56:01 - <[Mi7] JumpinJackFlas><13><STEAMID><0> connected, address IPADDRESS
 L 9/16/2012 - 12:56:06 - <FatherTime><6><STEAMID><2> killed <Sphen><4><STEAMID><1> with BiteLeap at (attacker_position 38.560000 3.970000 -2.400000) (victim_position 39.510000 2.750000 -4.130000)
 L 9/16/2012 - 12:56:20 - <FatherTime><6><STEAMID><2> killed <Siylenia><12><STEAMID><1> with BiteLeap at (attacker_position 62.810000 0.330000 19.350000) (victim_position 63.350000 -0.160000 20.500000)
 L 9/16/2012 - 12:56:47 - <Siylenia><12><STEAMID><1> killed <FatherTime><6><STEAMID><2> with Rifle at (attacker_position 81.250000 0.390000 30.740000) (victim_position 83.000000 1.180000 30.890000)
 L 9/16/2012 - 12:56:53 - <Siylenia><12><STEAMID><1> killed <AAA><10><STEAMID><2> with Rifle at (attacker_position 75.930000 -0.100000 35.140000) (victim_position 68.780000 4.880000 36.570000)
 L 9/16/2012 - 12:57:00 - <Teh_Prodigy><2><STEAMID><1> killed Hydra with Shotgun at (attacker_position 69.100000 0.010000 33.650000) (victim_position 64.600000 -0.000000 30.490000)
 
 VoteSurrender Plugin
 - This plugin provides a surrender vote system for each team, which can be used to vote for the game to end if a set percentage of the team votes.
 
 //Config
 
 Reserve Slot config

 -Name is just a friendly name for the user, is not checked in game.
 -ID is the steamID for the user, which is what is used to authenticate them in game.
 -Reason is the reason for why the user has a reserve slot
 -Time is the unix system time of when the reserve slot will expire, 0 will set it to not expire.

 Sample file below:

 {
 	{ "name": "dragon", "id": 5176141, "reason": "meh", "time": 0 }
 }
 
 ServerAdmin config
 
 This files works identically to the base admin system's configuration file.
 
 Sample file below:
 
 {
    "groups":
    {
        "admin_group": { "type": "disallowed", "commands": [ ] },
        "mod_group": { "type": "disallowed", "commands": [ "sv_ban", "sv_reset" ] },
        "clan_group": { "type": "allowed", "commands": [ "sv_kick", "sv_say" ] }
    }
    
    "users":
    {
        "dragon": { "id": 5176141, "groups": [ "clan_group" ] },
    }
}